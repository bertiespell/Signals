type Message_2 = record {
    "identity": text;
    "contents": text;
    "time": nat64;
};

type Message = Message_2;

type Profile_2 = record {
    "name": text;
    "description": text;
    "keywords": vec text;
};
type Profile = Profile_2;

type Coordinate_2 = record {
    "lat": float64;
    "long": float64;
};

type SignalType_2 = variant {
  chat;
  trade;
  event;
};

type Signal_2 = record {
    "messages": vec Message_2;
    "signal_type": SignalType_2;
};

type Signal = Signal_2;

type Located_Signal_2 = record {
    "location": Coordinate_2;
    "signal": Signal_2;
};

type Located_Signal = Located_Signal_2;

service : {
    "getSelf": () -> (Profile_2) query;
    "get": (text) -> (Profile_2) query;
    "update": (Profile_2) -> ();
    "search": (text) -> (opt Profile_2) query;
    "greet": (text) -> (text) query;
    "create_new_chat": (Coordinate_2, text, SignalType_2) -> (Signal_2);
    "get_signal": (Coordinate_2) -> (Signal_2);
    "add_new_message": (Coordinate_2, text) -> (Signal_2);
    "get_all_signals": () -> (vec Located_Signal_2) query;
    "whoami": () -> (principal) query;
    "get_signals_for_user": (principal) -> (vec Signal_2) query;
    "delete_signal": (Coordinate_2) -> ();
    "leave_rating": (Coordinate_2, bool) -> ();
    "get_rating_for_signal": (Coordinate_2) -> (int32) query;
}